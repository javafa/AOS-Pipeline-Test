node {
  try {
    def ANDROID_HOME = '/Users/donho/Library/Android/sdk'
    def ADB = "$ANDROID_HOME/platform-tools/adb"

    stage('Checkout') {
      // credentialsId : ''
      git branch: 'master', url: 'https://github.com/javafa/AOS-Pipeline-Test.git'
    }

    stage('License Agreement') {
      sh "yes | $ANDROID_HOME/tools/bin/sdkmanager --licenses"
    }

    stage('Build Debug') {
      sh './gradlew clean assembleDebug'
    }

    stage('Unit Tests') {
      sh './gradlew testDebugUnitTest'
    }
    
    stage('Build Release') {
      sh './gradlew clean assembleRelease'
    }

    stage('Instumental Tests') {
      sh "$ADB start-server"
      def error
      parallel (
        // launchEmulator: {
        //     sh "$ANDROID_HOME/emulator/emulator -avd wxga_tab -prop persist.sys.language=en -prop persist.sys.country=US -no-snapshot-load -no-snapshot-save"
        // },
        runAndroidTests: {
          timeout(time: 30, unit: 'SECONDS') {
            sh "$ADB wait-for-device"
          }
          try {
              sh './gradlew connectedAndroidTest'
          } catch (e) {
              error = e
          }
          // sh script: '/Users/donho/Library/Android/sdk/platform-tools/adb devices | grep emulator | cut -f1 | while read line; do /Users/donho/Library/Android/sdk/platform-tools/adb -s $line emu kill; done'
        }
      )
      if (error != null) {
        throw error
      }
    }
    currentBuild.result = 'SUCCESS'
  } catch (e) {
    currentBuild.result = 'FAILED'
    throw e
  } finally {
    stage('Stage Clean') {
    //   sh script: '/var/lib/jenkins/clean.sh'
    }
    stage('Report') {
      publishHTML (target : [allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: 'app/build/reports/androidTests/connected',
                    reportFiles: 'index.html',
                    reportName: 'mathTeacherReport',
                    reportTitles: 'math Teacher AOS'])
    }
    if(currentBuild.result == 'SUCCESS') {
      stage('Archive Files') {
        // Archive the APKs so that they can be downloaded from Jenkins
        echo 'Archiving APKs...'
        archiveArtifacts '**/*.apk'
      }
    }
  }
}




/* AVD LIST

Requirements
JDK 8

Under tools/bin dir
- Install Emulator Package
./sdkmanager --channel=3 emulator
- Create AVD
./avdmanager create avd -n android-27 -k 'system-images;android-27;default;x86_64' --force
- Package path is not valid 시 해당 패키지 다운로드
./sdkmanager 'system-images;android-25;default;x86_64'
- Sdk list
./sdkmanager --list
-Test Emulator
./emulator -avd wxga_tab -prop persist.sys.language=en -prop persist.sys.country=US -no-snapshot-load -no-snapshot-save

- HAXM 설치 Linux
1. docker exec -itu 0 컨테이너ID bash
2. apt-get update
3. apt-get install cpu-checker
4. sudo apt-get install qemu-kvm libvirt-bin ubuntu-vm-builder bridge-utils ia32-libs-multiarch

*/
